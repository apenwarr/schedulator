<XML>
  <DESCRIPTION>
    Test cases for communicating with a mobwrite server.
    For a description of the protocol, see:
      http://code.google.com/p/google-mobwrite/wiki/Protocol
    [RANDOM] is replaced with a string of random digits. The test harness
    chooses a new random string each time it runs a test case.
  </DESCRIPTION>

  <TEST NAME="Empty">
    <QUESTION>
    </QUESTION>
    <ANSWER>
    </ANSWER>
  </TEST>

  <TEST NAME="Ignore bad commands">
    <DESCRIPTION>
    The server replies to bad commands with an empty string.
    ('x' is not a defined command in the protocol.)
    </DESCRIPTION>
    <QUESTION>
u:user[RANDOM]
f:0:unittest[RANDOM]
x:foo
UNKNOWN COMMAND

    </QUESTION>
    <ANSWER>
    </ANSWER>
  </TEST>

  <TEST NAME="Good raw text">
    <DESCRIPTION>
    The client sends its file to the server with the 'r' command.
    The same file is already on the server,
    so it replies that there are no diffs.
    </DESCRIPTION>
    <QUESTION>
U:user[RANDOM]
f:0:unittest[RANDOM]
R:0:Hello world

    </QUESTION>
    <ANSWER>
u:user[RANDOM]
F:0:unittest[RANDOM]
D:0:=11

    </ANSWER>
    <QUESTION>
U:user[RANDOM]
f:0:unittest[RANDOM]
r:0:Hello world

    </QUESTION>
    <ANSWER>
u:user[RANDOM]
F:0:unittest[RANDOM]
d:0:=11

    </ANSWER>
  </TEST>

  <TEST NAME="Bad raw text">
    <DESCRIPTION>
    The client sends its file to the server with the 'r' command.
    The server has a different file, so it replies with diffs.
    </DESCRIPTION>
    <QUESTION>
u:user[RANDOM]
F:0:unittest[RANDOM]
R:0:Hello world

    </QUESTION>
    <ANSWER>
F:0:unittest[RANDOM]
D:0:=11

    </ANSWER>
    <QUESTION>
u:user[RANDOM]
F:0:unittest[RANDOM]
r:0:x

    </QUESTION>
    <ANSWER>
F:0:unittest[RANDOM]
d:0:-1	+Hello world

    </ANSWER>
  </TEST>

  <TEST NAME="Raw text on a null file">
    <DESCRIPTION>
    The client sends its file to the server with the 'r' command.
    The server has nothing, so it creates its file with the same text,
    and replies that there are no diffs.
    </DESCRIPTION>
    <QUESTION>
u:user[RANDOM]
f:0:unittest[RANDOM]
r:1:Hello world

    </QUESTION>
    <ANSWER>
F:1:unittest[RANDOM]
d:0:=11

    </ANSWER>
  </TEST>

  <TEST NAME="Good delta on null file">
    <DESCRIPTION>
    The client sends a diff with the 'd' command.
    The server has nothing, so it applies the diff to an empty file,
    and replies that there are no diffs.
    </DESCRIPTION>
    <QUESTION>
U:user[RANDOM]
F:0:unittest[RANDOM]
d:0:+Hello world

    </QUESTION>
    <ANSWER>
u:user[RANDOM]
F:1:unittest[RANDOM]
d:0:=11

    </ANSWER>
  </TEST>

  <TEST NAME="Bad delta on null file">
    <DESCRIPTION>
    The client sends a diff with the 'd' command.
    The server has nothing, so it creates the file,
    but diff cannot be applied to an empty file, so it's ignored.
    The server tells the client that the file is empty.
    </DESCRIPTION>
    <QUESTION>
u:user[RANDOM]
f:0:unittest[RANDOM]
d:0:-1

    </QUESTION>
    <ANSWER>
F:1:unittest[RANDOM]
r:0:

    </ANSWER>
  </TEST>

  <TEST NAME="Good delta">
    <DESCRIPTION>
    The client sends a file and a diff to apply.
    The server creates the file, applies the diff,
    and replies that there are no diffs.
    </DESCRIPTION>
    <QUESTION>
u:user[RANDOM]
F:0:unittest[RANDOM]
R:0:Hello world
d:0:-5	+Goodbye	=6

    </QUESTION>
    <ANSWER>
F:1:unittest[RANDOM]
d:0:=13

    </ANSWER>
  </TEST>

  <TEST NAME="Bad delta">
    <DESCRIPTION>
    The client sends a file and a bad diff to apply.
    The server creates the file, ignores the diff,
    and tells the client to replace its file
    with the text before the diff.
    </DESCRIPTION>
    <QUESTION>
u:user[RANDOM]
f:0:unittest[RANDOM]
R:0:Hello world
d:0:-5	+Goodbye	=5

    </QUESTION>
    <ANSWER>
F:1:unittest[RANDOM]
R:0:Hello world

    </ANSWER>
  </TEST>

  <TEST NAME="Delta nullified file">
    <DESCRIPTION>
    Clients A and B and the server have the same file.
    Client A tells the server to nullify the file.
    Client C asks the server for updates.
    The server doesn't have anything for C,
    so it returns an empty file.
    Client B asks the server for updates.
    The server replies that B has the latest file.
    </DESCRIPTION>
    <QUESTION>
u:user[RANDOM]a
f:0:unittest[RANDOM]
r:1:Hello world

    </QUESTION>
    <ANSWER>
F:1:unittest[RANDOM]
d:0:=11

    </ANSWER>
    <QUESTION>
u:user[RANDOM]b
f:0:unittest[RANDOM]
r:1:Hello world

    </QUESTION>
    <ANSWER>
F:1:unittest[RANDOM]
d:0:=11

    </ANSWER>
    <!-- Both a and b agree on 'Hello World'.  Now nullify -->
    <QUESTION>
u:user[RANDOM]a
N:unittest[RANDOM]

    </QUESTION>
    <ANSWER>

    </ANSWER>
    <!-- c has no information. -->
    <QUESTION>
u:user[RANDOM]c
f:0:unittest[RANDOM]
d:0:=11

    </QUESTION>
    <ANSWER>
F:1:unittest[RANDOM]
r:0:

    </ANSWER>
    <!-- b still has a copy in its shadow. -->
    <QUESTION>
u:user[RANDOM]b
f:1:unittest[RANDOM]
d:1:=11

    </QUESTION>
    <ANSWER>
F:2:unittest[RANDOM]
d:1:=11

    </ANSWER>
  </TEST>

  <TEST NAME="Force Delta nullified file">
    <DESCRIPTION>
    Same as the previous test, but using 'D' (force delta) instead of 'd'.
    </DESCRIPTION>
    <QUESTION>
u:user[RANDOM]a
f:0:unittest[RANDOM]
r:1:Hello world

    </QUESTION>
    <ANSWER>
F:1:unittest[RANDOM]
d:0:=11

    </ANSWER>
    <QUESTION>
u:user[RANDOM]b
f:0:unittest[RANDOM]
r:1:Hello world

    </QUESTION>
    <ANSWER>
F:1:unittest[RANDOM]
d:0:=11

    </ANSWER>
    <!-- Both a and b agree on 'Hello World'.  Now nullify -->
    <QUESTION>
u:user[RANDOM]a
N:unittest[RANDOM]

    </QUESTION>
    <ANSWER>

    </ANSWER>
    <!-- c has no information. -->
    <QUESTION>
u:user[RANDOM]c
f:0:unittest[RANDOM]
D:0:=11

    </QUESTION>
    <ANSWER>
F:1:unittest[RANDOM]
r:0:

    </ANSWER>
    <!-- b still has a copy in its shadow. -->
    <QUESTION>
u:user[RANDOM]b
f:1:unittest[RANDOM]
D:1:=11

    </QUESTION>
    <ANSWER>
F:2:unittest[RANDOM]
d:1:=11

    </ANSWER>
  </TEST>

  <TEST NAME="Raw text with all normal chars">
    <DESCRIPTION>
    Client sends a file containing punctuation, and a bad delta.
    Server ignores the delta and sends the whole file back.
    (The bad delta is to get the server to send the file.)
    </DESCRIPTION>
    <!-- Note, '&amp;' is encoded here for the XML. -->
    <QUESTION>
u:user[RANDOM]
f:0:unittest[RANDOM]
R:0:A-Z a-z 0-9 - _ . ! ~ * ' ( ) ; / ? : @ &amp; = + $ , #
d:0:-1

    </QUESTION>
    <ANSWER>
F:1:unittest[RANDOM]
R:0:A-Z a-z 0-9 - _ . ! ~ * ' ( ) ; / ? : @ &amp; = + $ , #

    </ANSWER>
  </TEST>

  <TEST NAME="Delta with all normal chars">
    <DESCRIPTION>
    Client sends an empty file and a delta containing punctuation.
    Then asks the server to send the diffs based on a file containing just 'x'.
    (This is to get the server to send a delta containing punctuation.)
    The server sends a delta restoring the file.
    </DESCRIPTION>
    <!-- Note, '&amp;' is encoded here for the XML. -->
    <QUESTION>
u:user[RANDOM]
f:0:unittest[RANDOM]
R:0:
d:0:+A-Z a-z 0-9 - _ . ! ~ * ' ( ) ; / ? : @ &amp; = + $ , #
r:1:x

    </QUESTION>
    <ANSWER>
F:1:unittest[RANDOM]
d:0:-1	+A-Z a-z 0-9 - _ . ! ~ * ' ( ) ; / ? : @ &amp; = + $ , #

    </ANSWER>
  </TEST>

  <TEST NAME="Raw text with special chars">
    <DESCRIPTION>
    Verifies that the null, percent, and newline characters
    can be sent and received as part of a file,
    escaped as 2-digit hexadecimal numbers, preceded by percent.
    </DESCRIPTION>
    <QUESTION>
u:user[RANDOM]
f:0:unittest[RANDOM]
R:0:a%00b%25c%0Ad
d:0:-1

    </QUESTION>
    <ANSWER>
F:1:unittest[RANDOM]
R:0:a%00b%25c%0Ad

    </ANSWER>
  </TEST>

  <TEST NAME="Delta with special chars">
    <DESCRIPTION>
    Verifies that the null, percent, and newline characters
    can be sent and received as part of a diff.
    </DESCRIPTION>
    <QUESTION>
u:user[RANDOM]
f:0:unittest[RANDOM]
R:0:
d:0:+a%00b%25c%0Ad
r:1:x

    </QUESTION>
    <ANSWER>
F:1:unittest[RANDOM]
d:0:-1	+a%00b%25c%0Ad

    </ANSWER>
  </TEST>

  <TEST NAME="Raw text with Unicode">
    <DESCRIPTION>
    Verifies that the Unicode character 3046 (HIRAGANA LETTER U)
    can be transmitted in a file in both directions
    by converting to UTF 8 and sending the hexadecimal escaped form of each byte.
    </DESCRIPTION>
    <QUESTION>
u:user[RANDOM]
f:0:unittest[RANDOM]
R:0:a%E3%81%86b
d:0:-1

    </QUESTION>
    <ANSWER>
F:1:unittest[RANDOM]
R:0:a%E3%81%86b

    </ANSWER>
  </TEST>

  <TEST NAME="Delta with Unicode">
    <DESCRIPTION>
    Verifies that the Unicode character 3046 (HIRAGANA LETTER U)
    can be transmitted in a delta in both directions
    by converting to UTF 8 and sending the hexadecimal escaped form of each byte.
    </DESCRIPTION>
    <QUESTION>
u:user[RANDOM]
f:0:unittest[RANDOM]
R:0:
d:0:+a%E3%81%86b
r:1:x

    </QUESTION>
    <ANSWER>
F:1:unittest[RANDOM]
d:0:-1	+a%E3%81%86b

    </ANSWER>
  </TEST>

  <TEST NAME="Raw text with malformed linefeed">
    <DESCRIPTION>
    The client sends a text to the server with a return character.
    The server tells the client to use a linefeed instead.
    </DESCRIPTION>
    <QUESTION>
u:user[RANDOM]
f:0:unittest[RANDOM]
R:0:a%0Db

    </QUESTION>
    <ANSWER>
F:0:unittest[RANDOM]
D:0:=1	-1	+%0A	=1

    </ANSWER>
  </TEST>

  <TEST NAME="Delta with malformed linefeed">
    <DESCRIPTION>
    The client sends a diff adding a DOS-style line ending to the file.
    The server tells the client to delete the return character,
    turning it into a Unix line ending.
    </DESCRIPTION>
    <QUESTION>
u:user[RANDOM]
f:0:unittest[RANDOM]
R:0:ab
d:0:=1	+%0D%0A	=1

    </QUESTION>
    <ANSWER>
F:1:unittest[RANDOM]
d:0:=1	-1	=2

    </ANSWER>
  </TEST>

  <TEST NAME="Simple collaboration">
    <DESCRIPTION>
    Clients A and B have 'Hello world' at version 0.
    Client B changes 'Hello' to 'Goodbye'.
    A polls the server by incrementing version to 1 with no changes.
    The server tells A to change 'Hello' to 'Goodbye'.
    </DESCRIPTION>
    <QUESTION>
F:0:unittest[RANDOM]
U:user[RANDOM]a
R:0:Hello world
U:user[RANDOM]b
R:0:Hello world
d:0:-5	+Goodbye	=6
U:user[RANDOM]a
d:0:=11

    </QUESTION>
    <ANSWER>
u:user[RANDOM]a
F:0:unittest[RANDOM]
D:0:=11
u:user[RANDOM]b
F:1:unittest[RANDOM]
d:0:=13
u:user[RANDOM]a
F:1:unittest[RANDOM]
d:0:-5	+Goodbye	=6

    </ANSWER>
  </TEST>

  <TEST NAME="Simple merge">
    <DESCRIPTION>
    Clients A and B have 'Hello world'.
    Client B changes 'Hello' to 'Goodbye'.
    Client A changes 'world' to 'worm'.
    In reply, server tells A to change 'Hello' to 'Goodbye'.
    </DESCRIPTION>
    <QUESTION>
f:0:unittest[RANDOM]
u:user[RANDOM]a
R:0:Hello world

    </QUESTION>
    <ANSWER>
F:0:unittest[RANDOM]
D:0:=11

    </ANSWER>
    <QUESTION>
f:0:unittest[RANDOM]
U:user[RANDOM]b
R:0:Hello world
d:0:-5	+Goodbye	=6

    </QUESTION>
    <ANSWER>
u:user[RANDOM]b
F:1:unittest[RANDOM]
d:0:=13

    </ANSWER>
    <QUESTION>
f:1:unittest[RANDOM]
U:user[RANDOM]a
d:0:=9	-2	+m

    </QUESTION>
    <ANSWER>
u:user[RANDOM]a
F:1:unittest[RANDOM]
d:1:-5	+Goodbye	=5

    </ANSWER>
  </TEST>

  <TEST NAME="Conflicting merge">
    <DESCRIPTION>
    Clients A and B have 'Hello world'.
    B changes 'Hello' to 'Goodbye'.
    A changes 'Hello' to 'My'.
    Server tells A to change 'My' to 'Goodbye' (first change wins).
    </DESCRIPTION>
    <QUESTION>
f:0:unittest[RANDOM]
U:user[RANDOM]a
R:0:Hello world

    </QUESTION>
    <ANSWER>
u:user[RANDOM]a
F:0:unittest[RANDOM]
D:0:=11

    </ANSWER>
    <QUESTION>
f:0:unittest[RANDOM]
U:user[RANDOM]b
R:0:Hello world
d:0:-5	+Goodbye	=6

    </QUESTION>
    <ANSWER>
u:user[RANDOM]b
F:1:unittest[RANDOM]
d:0:=13

    </ANSWER>
    <QUESTION>
f:1:unittest[RANDOM]
U:user[RANDOM]a
d:0:-5	+My	=6

    </QUESTION>
    <ANSWER>
u:user[RANDOM]a
F:1:unittest[RANDOM]
d:1:-2	+Goodbye	=6

    </ANSWER>
  </TEST>

  <TEST NAME="Text merge">
    <DESCRIPTION>
    Clients A and B have 'bc'.
    Client B changes it to 'abc'.
    Client A changes it to 'bcd'.
    Server tells A to change it to 'abcd'.
    </DESCRIPTION>
    <QUESTION>
f:0:unittest[RANDOM]
U:user[RANDOM]a
R:0:bc

    </QUESTION>
    <ANSWER>
u:user[RANDOM]a
F:0:unittest[RANDOM]
D:0:=2

    </ANSWER>
    <QUESTION>
f:0:unittest[RANDOM]
U:user[RANDOM]b
R:0:bc
d:0:+a	=2

    </QUESTION>
    <ANSWER>
u:user[RANDOM]b
F:1:unittest[RANDOM]
d:0:=3

    </ANSWER>
    <QUESTION>
f:1:unittest[RANDOM]
U:user[RANDOM]a
d:0:=2	+d

    </QUESTION>
    <ANSWER>
u:user[RANDOM]a
F:1:unittest[RANDOM]
d:1:+a	=3

    </ANSWER>
  </TEST>

  <TEST NAME="Numeric merge">
    <DESCRIPTION>
    Clients A and B have '23'.
    Client B changes it to '123'.
    Client A changes it to '234'.
    Server doesn't tell A to change it (B's change loses).
    (Note that the difference between this and the previous test
    is because the last delta is sent with an uppercase 'D', not
    because the data is numeric.)
    </DESCRIPTION>
    <QUESTION>
f:0:unittest[RANDOM]
U:user[RANDOM]a
R:0:23

    </QUESTION>
    <ANSWER>
u:user[RANDOM]a
F:0:unittest[RANDOM]
D:0:=2

    </ANSWER>
    <QUESTION>
f:0:unittest[RANDOM]
U:user[RANDOM]b
R:0:23
D:0:+1	=2

    </QUESTION>
    <ANSWER>
u:user[RANDOM]b
F:1:unittest[RANDOM]
D:0:=3

    </ANSWER>
    <QUESTION>
f:1:unittest[RANDOM]
U:user[RANDOM]a
D:0:=2	+4

    </QUESTION>
    <ANSWER>
u:user[RANDOM]a
F:1:unittest[RANDOM]
D:1:=3

    </ANSWER>
  </TEST>

  <TEST NAME="Complete Buffer">
    <DESCRIPTION>
    Send a three-part buffer out of order (2, 3, 1) and verify correct assembly.
    </DESCRIPTION>
    <QUESTION>
b:testbuffer1 3 2 3Aunittest[RANDOM]%0AR%3

    </QUESTION>
    <ANSWER>
    </ANSWER>
    <QUESTION>
b:testbuffer1 3 3 A0%3AHello world%0A

    </QUESTION>
    <ANSWER>
    </ANSWER>
    <QUESTION>
b:testbuffer1 3 1 U%3Auser[RANDOM]%0Af%3A0%

    </QUESTION>
    <ANSWER>
u:user[RANDOM]
F:0:unittest[RANDOM]
D:0:=11

    </ANSWER>
  </TEST>

  <TEST NAME="Incomplete Buffer">
    <DESCRIPTION>
    Send two parts of a three-part buffer (2, 3) and verify no ouput.
    </DESCRIPTION>
    <QUESTION>
b:testbuffer2 3 2 f%3A0%3Aunittest[RANDOM]%0A
b:testbuffer2 3 3 R%3A0%3AHello world%0A

    </QUESTION>
    <ANSWER>

    </ANSWER>
  </TEST>

  <TEST NAME="Nested Buffer">
    <DESCRIPTION>
    Send a three-part buffer which itself contains a three-part buffer.
    There is no rational reason to nest a buffer, this test is just for fun.
    </DESCRIPTION>
    <QUESTION>
b:testbuffer3 3 2 b%3Atestbuffer4 3 2 f%253A0%253Aunittest[RANDOM]%250A%0A
b:testbuffer3 3 1 b%3Atestbuffer4 3 3 R%253A0%253AHello world%250A%0A
b:testbuffer3 3 3 b%3Atestbuffer4 3 1 U%253Auser[RANDOM]%250A%0A

    </QUESTION>
    <ANSWER>
u:user[RANDOM]
F:0:unittest[RANDOM]
D:0:=11

    </ANSWER>
  </TEST>

  <TEST NAME="Invalid Buffers">
    <DESCRIPTION>
    Send three invalid buffers and one single-slot buffer.
    Only the latter should return an answer.
    </DESCRIPTION>
    <QUESTION>
b:testbuffer5 0 0 u%3Auser[RANDOM]%0Af%3A0%3Aunittest[RANDOM]a%0AR%3A0%3AHello world%0A
b:testbuffer6 0 1 u%3Auser[RANDOM]%0Af%3A0%3Aunittest[RANDOM]b%0AR%3A0%3AHello world%0A
b:testbuffer7 1 2 u%3Auser[RANDOM]%0Af%3A0%3Aunittest[RANDOM]c%0AR%3A0%3AHello world%0A
b:testbuffer8 1 1 u%3Auser[RANDOM]%0Af%3A0%3Aunittest[RANDOM]d%0AR%3A0%3AHello world%0A

    </QUESTION>
    <ANSWER>
F:0:unittest[RANDOM]d
D:0:=11

    </ANSWER>
  </TEST>

  <TEST NAME="Duplicate packet">
    <DESCRIPTION>
    Client creates 'Hello world'.
    Client changes 'Hello' to 'Goodbye'.
    Duplicate packet changes 'Hello' to 'Goodbye' again.
    The server's reponse is the same as the first time.
    </DESCRIPTION>
    <QUESTION>
u:user[RANDOM]
f:0:unittest[RANDOM]
R:0:Hello world

    </QUESTION>
    <ANSWER>
F:0:unittest[RANDOM]
D:0:=11

    </ANSWER>
    <QUESTION>
u:user[RANDOM]
f:1:unittest[RANDOM]
d:0:-5	+Goodbye	=6

    </QUESTION>
    <ANSWER>
F:1:unittest[RANDOM]
d:1:=13

    </ANSWER>
    <QUESTION>
u:user[RANDOM]
f:1:unittest[RANDOM]
d:0:-5	+Goodbye	=6

    </QUESTION>
    <ANSWER>
F:1:unittest[RANDOM]
d:1:=13

    </ANSWER>
  </TEST>

  <TEST NAME="Lost return packet">
    <DESCRIPTION>
    Client A has 'Hello world' at version 0.
    Client B has 'Goodbye world' (overwrites A).
    A increments version to 1, with no changes.
    Server tells A to change 'Hello' to 'Goodbye', but A doesn't get it.
    A tells server it is still at version 1, and there are no changes
    from 0 to 1 or from 1 to 2.
    Server resends change from 'Hello' to 'Goodbye'.
    </DESCRIPTION>
    <QUESTION>
u:user[RANDOM]a
f:0:unittest[RANDOM]
R:0:Hello world

    </QUESTION>
    <ANSWER>
F:0:unittest[RANDOM]
D:0:=11

    </ANSWER>
    <QUESTION>
u:user[RANDOM]b
f:0:unittest[RANDOM]
R:0:Goodbye world

    </QUESTION>
    <ANSWER>
F:0:unittest[RANDOM]
D:0:=13

    </ANSWER>
    <QUESTION>
u:user[RANDOM]a
f:1:unittest[RANDOM]
d:0:=11

    </QUESTION>
    <ANSWER>
F:1:unittest[RANDOM]
d:1:-5	+Goodbye	=6

    </ANSWER>
    <!-- Pretend we didn't hear the last answer. -->
    <!-- Should trigger a rollback of the shadow. -->
    <QUESTION>
u:user[RANDOM]a
f:1:unittest[RANDOM]
d:0:=11
d:1:=11

    </QUESTION>
    <ANSWER>
F:2:unittest[RANDOM]
d:1:-5	+Goodbye	=6

    </ANSWER>
  </TEST>

</XML>
